ClickMapCreateRecord() {
  void run() {
    executeOnEvent("Start/Map/Create_Record", "click");
  }
  return this;
}

// CREATING A Brick RECORD POPULATES TIMESTAMP
{
  executeOnEvent("Brick", "create");

  String ref = "Brick/Site/Created_at";
  String val = getFieldValue(ref);

  assert(val != null);
  assert(val.length() == "yyyy-MM-dd".length());
}

// GIS FUNCTIONS EXECUTE WITHOUT EXCEPTIONS
{
  CheckForGeometry() {
    void run() { checkForGeometry(); }
    return this;
  }

  clearGeometry();
  getStdout(CheckForGeometry());
  refreshMap();
  fillInGPSForBrick();
}

// CLICKING "Start/Map/Create_Record" YIELDS AN ERROR MESSAGE WHEN THERE'S NO
// GEOMETRY AND DOES NOT LEAVE TAB GROUP
{
  getGeometryList(String ref, int i) { return null; }

  updateDisplayedTabGroup("Start");

  String tgBefore = getDisplayedTabGroup();
  String expected =
          "showWarning: " +
          "Cannot Create Record | " +
          "Exactly one shape must be present on the data entry layer.\n";
  String out = getStdout(ClickMapCreateRecord());
  String tgAfter = getDisplayedTabGroup();

  assert(expected.equals(out));
  assert(tgBefore.equals(tgAfter));
}

// CLICKING "Start/Map/Create_Record" YIELDS AN ERROR MESSAGE WHEN THERE'S NO
// GEOMETRY AND DOES NOT LEAVE TAB GROUP
{
  getGeometryList(String ref, int i) { return new ArrayList(); }

  updateDisplayedTabGroup("Start");

  String tgBefore = getDisplayedTabGroup();
  String expected =
          "showWarning: " +
          "Cannot Create Record | " +
          "Exactly one shape must be present on the data entry layer.\n";
  String out = getStdout(ClickMapCreateRecord());
  String tgAfter = getDisplayedTabGroup();

  assert(expected.equals(out));
  assert(tgBefore.equals(tgAfter));
}

// CLICKING "Start/Map/Create_Record" YIELDS NO ERROR MESSAGE WHEN THERE'S
// GEOMETRY AND DOES LEAVE TAB GROUP
{
  getGeometryList(String ref, int i) {
    List geo = new ArrayList();
    geo.add("dummy");
    return geo;
  }

  updateDisplayedTabGroup("Start");

  String tgBefore = getDisplayedTabGroup();
  String expected = "";
  String out = getStdout(ClickMapCreateRecord());
  String tgAfter = getDisplayedTabGroup();

  assert(expected.equals(out));
  assert(!tgBefore.equals(tgAfter));
}

{
  SearchFns() {
    void run() {
      populateSelectUser();
      populateSelectDate();
      populateSelectFrogType();
      search();
    }
    return this;
  }

  getStdout(SearchFns());
}

{
  Validate() {
    void run() {
      executeOnEvent("Brick/Description/Validate", "click");
    }
    return this;
  }

  String expected =
      "showWarning: {validation_results} | {please_fill_out_the_following_fields}- {Location}" +
    "\n- {Street_no_}" +
    "\n- {Street_Name}" +
    "\n- {Suburb}" +
    "\n- {Dominant_Colour}" +
    "\n- {Width__cm_}" +
    "\n- {Length__cm_}" +
    "\n- {Height__cm_}" +
    "\n- {Weight__g_}" +
    "\n- {Brick_Photo}" +
    "\n- {Frog_Type}" +
    "\n- {Technology}" +
    "\n- {Preservation}" +
    "\n- {Start_Year}" +
    "\n- {End_Year}" +
    "\n- {Checked_by}" +
    "\n" +
    "\n";

  String out = getStdout(Validate());

  assert(expected.equals(out));
}

// `duplicateBrick` THROWS NO EXCEPTIONS
{
  duplicateBrick();
}
